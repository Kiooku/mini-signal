{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/home/gaetan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.6/src/filters/addr.rs","byte_start":550,"byte_end":621,"line_start":24,"line_end":24,"column_start":20,"column_end":91,"is_primary":false,"text":[{"text":"pub fn remote() -> impl Filter<Extract = (Option<SocketAddr>,), Error = Infallible> + Copy {","highlight_start":20,"highlight_end":91}],"label":"the found opaque type","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/gaetan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.6/src/filters/addr.rs","byte_start":550,"byte_end":621,"line_start":24,"line_end":24,"column_start":20,"column_end":91,"is_primary":false,"text":[{"text":"pub fn remote() -> impl Filter<Extract = (Option<SocketAddr>,), Error = Infallible> + Copy {","highlight_start":20,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `impl Trait`","def_site_span":{"file_name":"src/bin/server.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/bin/server.rs","byte_start":1952,"byte_end":1981,"line_start":62,"line_end":62,"column_start":61,"column_end":90,"is_primary":true,"text":[{"text":"        .map(|body| warp::reply::json(&action_handler(body, warp::filters::addr::remote())));","highlight_start":61,"highlight_end":90}],"label":"expected `IpAddr`, found opaque type","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/server.rs","byte_start":1931,"byte_end":1945,"line_start":62,"line_end":62,"column_start":40,"column_end":54,"is_primary":false,"text":[{"text":"        .map(|body| warp::reply::json(&action_handler(body, warp::filters::addr::remote())));","highlight_start":40,"highlight_end":54}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"    expected enum `IpAddr`\nfound opaque type `impl warp::Filter + warp::filter::FilterBase<Extract = (std::option::Option<std::net::SocketAddr>,), Error = Infallible> + Copy`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src/bin/server.rs","byte_start":2120,"byte_end":2135,"line_start":70,"line_end":70,"column_start":36,"column_end":51,"is_primary":false,"text":[{"text":"fn action_handler(request: Action, ip_addr: IpAddr) -> Response {","highlight_start":36,"highlight_end":51}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/bin/server.rs","byte_start":2088,"byte_end":2102,"line_start":70,"line_end":70,"column_start":4,"column_end":18,"is_primary":true,"text":[{"text":"fn action_handler(request: Action, ip_addr: IpAddr) -> Response {","highlight_start":4,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/server.rs:62:61\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .map(|body| warp::reply::json(&action_handler(body, warp::filters::addr::remote())));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `IpAddr`, found opaque type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/home/gaetan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/warp-0.3.6/src/filters/addr.rs:24:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub fn remote() -> impl Filter<Extract = (Option<SocketAddr>,), Error = Infallible> + Copy {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthe found opaque type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m:     expected enum `\u001b[0m\u001b[0m\u001b[1mIpAddr\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m           found opaque type `\u001b[0m\u001b[0m\u001b[1mimpl warp::Filter + warp::filter::FilterBase<Extract = (std::option::Option<std::net::SocketAddr>,), Error = Infallible> + Copy\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bin/server.rs:70:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn action_handler(request: Action, ip_addr: IpAddr) -> Response {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
